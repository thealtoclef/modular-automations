name: ðŸš€ Release Docker Image
on:
  workflow_call:
    inputs:
      runs_on:
        description: The runner to use for the job
        default: "self-hosted"
        required: false
        type: string
      warp_build_profile:
        description: WarpBuild profile to use
        default: ""
        required: false
        type: string
      platforms:
        description: The platforms to build the Docker image for
        default: "linux/amd64"
        required: false
        type: string
      context_dir:
        description: The context directory to build the Docker image in
        default: "."
        required: false
        type: string
      dockerfile_path:
        description: The path to the Dockerfile to build, relative to the context directory
        default: "Dockerfile"
        required: false
        type: string
      build_args:
        description: Build arguments to pass to the Docker build
        default: ""
        required: false
        type: string
      force_build:
        description: Force build even if no Dockerfile changes detected
        default: false
        required: false
        type: boolean

jobs:
  setup:
    runs-on: ${{ inputs.runs_on }}
    outputs:
      has_items: ${{ steps.app-meta.outputs.has_items }}
      image_items: ${{ steps.app-meta.outputs.image_items }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Get all changed version files
        id: changed-files
        uses: tj-actions/changed-files@v46
        with:
          files: |
            **/version.txt

      - name: Get App metadata
        id: app-meta
        run: |
          # Initialize array for outputs
          declare -a image_items
          
          if [[ "${{ steps.changed-files.outputs.all_changed_files_count }}" -gt "0" || "${{ inputs.force_build }}" == "true" ]]; then
            if [[ "${{ inputs.force_build }}" == "true" ]]; then
              # Force build logic - always build with input parameters
              echo "Force build with input parameters"
              context_dir="${{ inputs.context_dir }}"
              dockerfile_path="${{ inputs.dockerfile_path }}"
              image_name="${{ github.event.repository.owner.login }}/${{ github.event.repository.name }}"
              
              # Get version from version.txt in context_dir if it exists
              version=""
              version_file="$context_dir/version.txt"
              if [[ -f "$version_file" ]]; then
                version=$(cat "$version_file")
              fi
              
              # Create an item with all the needed properties
              item=$(jq -n \
                --arg cd "$context_dir" \
                --arg dp "$dockerfile_path" \
                --arg in "$image_name" \
                --arg v "$version" \
                '{context_dir: $cd, dockerfile_path: $dp, image_name: $in, version: $v}')
              echo "Adding item: $item"
              image_items+=("$item")
            else
              # Non-force build logic - only process changed version.txt files
              for changed_file in ${{ steps.changed-files.outputs.all_changed_files }}; do
                if [[ -n "${changed_file}" ]]; then
                  context_dir=$(dirname $changed_file)
                  dockerfile_path="Dockerfile"  # Assuming Dockerfile is in the same directory
                  
                  # If version.txt is in root, use repo name as app_name
                  if [[ "$context_dir" == "." ]]; then
                    app_name="${{ github.event.repository.name }}"
                  else
                    app_name=$(basename $context_dir)
                  fi
                  
                  # Only process if Dockerfile exists
                  if [[ -f "$context_dir/Dockerfile" ]]; then
                    # Read version from the changed version.txt
                    version=$(cat "$changed_file")
                    tag_name="${app_name}-${version}"
                    
                    # Check if tag already exists
                    if [ $(git tag -l ${tag_name}) ]; then
                      echo "Tag ${tag_name} already exists, skipping image ${app_name}"
                      continue
                    fi
                    
                    # Create an item with all the needed properties
                    item=$(jq -n \
                      --arg cd "$context_dir" \
                      --arg dp "$dockerfile_path" \
                      --arg in "${{ github.event.repository.owner.login }}/${app_name}" \
                      --arg v "$version" \
                      '{context_dir: $cd, dockerfile_path: $dp, image_name: $in, version: $v}')
                    echo "Adding item: $item"
                    image_items+=("$item")
                  fi
                fi
              done
            fi
          else
            # No changes and no force build
            echo "No changes detected and force_build is false"
            exit 0
          fi

          # Check if we have items to process
          if [ ${#image_items[@]} -eq 0 ]; then
            echo "has_items=false" >> $GITHUB_OUTPUT
          else
            echo "has_items=true" >> $GITHUB_OUTPUT
            # Create a properly formatted JSON array and escape properly for GitHub Actions
            json_array=$(printf '%s\n' "${image_items[@]}" | jq -c -s .)
            # GitHub Actions requires a specific format for multiline outputs
            echo "image_items<<EOF" >> $GITHUB_OUTPUT
            echo "$json_array" >> $GITHUB_OUTPUT
            echo "EOF" >> $GITHUB_OUTPUT
          fi

  release:
    needs: [setup]
    if: ${{ needs.setup.outputs.has_items == 'true' }}
    runs-on: ${{ inputs.runs_on }}
    permissions:
      contents: write
      packages: write
    strategy:
      matrix:
        image_item: ${{ fromJson(needs.setup.outputs.image_items) }}
    steps:
      - name: Parse image item
        id: parse-item
        run: |
          # Using jq to extract values from the JSON object
          context_dir=$(echo '${{ toJSON(matrix.image_item) }}' | jq -r '.context_dir')
          dockerfile_path=$(echo '${{ toJSON(matrix.image_item) }}' | jq -r '.dockerfile_path')
          image_name=$(echo '${{ toJSON(matrix.image_item) }}' | jq -r '.image_name')
          version=$(echo '${{ toJSON(matrix.image_item) }}' | jq -r '.version')
          
          echo "context_dir=${context_dir}" >> $GITHUB_OUTPUT
          echo "dockerfile_path=${dockerfile_path}" >> $GITHUB_OUTPUT
          echo "image_name=${image_name}" >> $GITHUB_OUTPUT
          echo "version=${version}" >> $GITHUB_OUTPUT

      - name: Install packages
        uses: ConorMacBride/install-package@v1
        with:
          apt: uuid-runtime

      - name: Setup GitHub environment
        id: setup-github-env
        run: |
          echo "::add-mask::$WARPBUILD_API_KEY"
          echo "WARPBUILD_API_KEY=$WARPBUILD_API_KEY" >> $GITHUB_ENV

      - name: Get Docker metadata
        id: docker-meta
        uses: docker/metadata-action@v5
        with:
          images: ghcr.io/${{ steps.parse-item.outputs.image_name }}
          tags: |
            type=sha
            type=schedule
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=semver,pattern={{major}}
            type=raw,value=latest,enable={{is_default_branch}}
            type=raw,value=${{ steps.parse-item.outputs.version }},priority=1001,enable=${{ steps.parse-item.outputs.version != '' }}

      - name: Login to GHCR
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ github.token }}

      - name: Configure WarpBuild Docker Builders
        if: ${{ inputs.warp_build_profile != '' }}
        uses: Warpbuilds/docker-configure@v1
        with:
          api-key: ${{ env.WARPBUILD_API_KEY }}
          profile-name: ${{ inputs.warp_build_profile }}

      - name: Set up Docker Buildx
        if: ${{ inputs.warp_build_profile == '' }}
        uses: docker/setup-buildx-action@v3

      - name: Build and push
        uses: docker/build-push-action@v6
        env:
          DOCKER_BUILD_RECORD_UPLOAD: ${{ inputs.warp_build_profile == '' }}
          DOCKER_BUILD_SUMMARY: ${{ inputs.warp_build_profile == '' }}
          DOCKER_BUILD_CHECKS_ANNOTATIONS: ${{ inputs.warp_build_profile == '' }}
          DOCKER_BUILDKIT_PROVENANCE: ${{ inputs.warp_build_profile == '' }}
          DOCKER_BUILDKIT_SBOM: ${{ inputs.warp_build_profile == '' }}
          DOCKER_BUILDKIT_ATTESTATIONS: ${{ inputs.warp_build_profile == '' }}
        with:
          push: ${{ github.event_name != 'pull_request' }}
          context: "{{defaultContext}}:${{ steps.parse-item.outputs.context_dir }}"
          file: ${{ steps.parse-item.outputs.dockerfile_path }}
          build-args: ${{ inputs.build_args }}
          cache-from: "type=registry,ref=ghcr.io/${{ steps.parse-item.outputs.image_name }}:cache"
          cache-to: "mode=max,image-manifest=true,oci-mediatypes=true,type=registry,ref=ghcr.io/${{ steps.parse-item.outputs.image_name }}:cache"
          tags: ${{ steps.docker-meta.outputs.tags }}
          platforms: ${{ inputs.platforms }}

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ steps.parse-item.outputs.image_name }}-${{ steps.docker-meta.outputs.version }}
          body: |
            Source commit: https://github.com/${{ github.repository }}/commit/${{ github.sha }}
