name: ðŸš€ Release Docker Image
on:
  workflow_call:
    inputs:
      runs_on:
        description: The runner to use for the job
        default: "self-hosted"
        required: false
        type: string
      dind:
        description: Whether to use Docker-in-Docker
        default: false
        required: false
        type: boolean
      dind_platforms:
        description: The platforms to build for when using Docker-in-Docker
        default: "linux/amd64"
        required: false
        type: string
      is_monorepo:
        description: Whether the repository is a monorepo
        default: false
        required: false
        type: boolean
      context_dir:
        description: The context directory to build the Docker image in
        default: "."
        required: false
        type: string
      dockerfile_path:
        description: The path to the Dockerfile to build, relative to the context directory
        default: "Dockerfile"
        required: false
        type: string
      build_args:
        description: Build arguments to pass to the Docker build
        default: ""
        required: false
        type: string

jobs:
  setup:
    runs-on: ${{ inputs.runs_on }}
    outputs:
      context_dir: ${{ steps.app-meta.outputs.context_dir }}
      dockerfile_path: ${{ steps.app-meta.outputs.dockerfile_path }}
      image_name: ${{ steps.app-meta.outputs.image_name }}
      destinations: ${{ steps.docker-meta.outputs.tags }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Get all changed Dockerfiles
        id: changed-files
        if: ${{ inputs.is_monorepo == true }}
        uses: tj-actions/changed-files@v45
        with:
          files: |
            **/Dockerfile

      - name: List changed Dockerfiles
        id: list-changed
        if: ${{ inputs.is_monorepo == true }}
        run: |
          changed_files=${{ steps.changed-files.outputs.all_changed_files }}
          echo $changed_files
          echo "changed_files=$changed_files" >> $GITHUB_OUTPUT

          num_changed=${{ steps.changed-files.outputs.all_changed_files_count }}
          if [[ "$num_changed" -gt "1" ]]; then
            echo "More than one Dockerfile changed, exiting"
            exit 1
          elif [[ "$num_changed" -eq "1" ]]; then
            echo "One Dockerfile changed"
          else
            echo "No Dockerfiles have changed, exiting"
            exit 1
          fi

      - name: Get App metadata
        id: app-meta
        run: |
          if [ "${{ inputs.is_monorepo }}" == "true" ]; then
            changed_files=${{ steps.list-changed.outputs.changed_files }}
            context_dir=$(dirname $changed_files)
            dockerfile_path=$(realpath --relative-to=$context_dir $changed_files)
            app_name=$(basename $context_dir)
          else
            context_dir=${{ inputs.context_dir }}
            dockerfile_path=${{ inputs.dockerfile_path }}
            app_name=${{ github.event.repository.name }}
          fi

          echo "context_dir=$context_dir" >> $GITHUB_OUTPUT
          echo "dockerfile_path=$dockerfile_path" >> $GITHUB_OUTPUT

          image_name=${{ github.event.repository.owner.login }}/$app_name
          echo "image_name=$image_name" >> $GITHUB_OUTPUT

      - name: Get Docker metadata
        id: docker-meta
        uses: docker/metadata-action@v5
        with:
          images: ghcr.io/${{ steps.app-meta.outputs.image_name }}
          tags: |
            type=sha,format=long,priority=1001,prefix=sha-,enable=true
            type=schedule,pattern=nightly,enable=true,priority=1000
            type=semver,pattern={{version}},value=,enable=true,priority=900
            type=semver,pattern={{major}}.{{minor}},value=,enable=true,priority=900
            type=semver,pattern={{major}},value=,enable=true,priority=900
            type=ref,event=branch,enable=true,priority=600
            type=ref,event=pr,prefix=pr-,enable=true,priority=600
            type=raw,value=latest,enable={{is_default_branch}},priority=200
            type=sha,prefix=sha-,format=short,enable=true,priority=100

  release:
    if: ${{ inputs.dind == false }}
    runs-on: ${{ inputs.runs_on }}
    container:
      image: gcr.io/kaniko-project/executor:debug
    needs: [setup]
    permissions:
      contents: read
      packages: write
    steps:
      - name: Setup environment variables
        run: |
          DESTINATIONS=""
          while IFS= read -r destination; do
              destination=$(echo "$destination" | xargs)
              if [ -z "$destination" ]; then
                  continue
              fi
              if [ -z "$DESTINATIONS" ]; then
                  DESTINATIONS="--destination=$destination"
              else
                  DESTINATIONS="$DESTINATIONS --destination=$destination"
              fi
          done <<EOF
          ${{ needs.setup.outputs.destinations }}
          EOF
          echo "DESTINATIONS=$DESTINATIONS" >> $GITHUB_ENV

          BUILD_ARGS=""
          while IFS= read -r arg; do
              arg=$(echo "$arg" | xargs)
              if [ -z "$arg" ]; then
                  continue
              fi
              if [ -z "$BUILD_ARGS" ]; then
                  BUILD_ARGS="--build-arg=$arg"
              else
                  BUILD_ARGS="$BUILD_ARGS --build-arg=$arg"
              fi
          done <<EOF
          ${{ inputs.build_args }}
          EOF
          echo "BUILD_ARGS=$BUILD_ARGS" >> $GITHUB_ENV

      - name: Build and push to GHCR with kaniko
        run: |
          cat <<EOF > /kaniko/.docker/config.json
          {
            "auths": {
              "ghcr.io": {
                "auth": "$(echo -n "$GIT_USERNAME:$GIT_PASSWORD" | base64 -w0)"
              }
            }
          }
          EOF

          /kaniko/executor \
            --context="${{ github.repositoryUrl }}#${{ github.ref }}#${{ github.sha }}" \
            --context-sub-path="${{ needs.setup.outputs.context_dir }}" \
            --dockerfile="${{ needs.setup.outputs.dockerfile_path }}" \
            ${{ env.BUILD_ARGS }} \
            --cache=true --cache-repo=ghcr.io/${{ needs.setup.outputs.image_name }}/cache \
            ${{ env.DESTINATIONS }} \
            --push-retry 5 --use-new-run
        env:
          GIT_USERNAME: ${{ github.actor }}
          GIT_PASSWORD: ${{ github.token }}

  release-dind:
    if: ${{ inputs.dind == true }}
    runs-on: ${{ inputs.runs_on }}
    needs: [setup]
    permissions:
      contents: read
      packages: write
    steps:
      - name: Login to GHCR
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ github.token }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        with:
          driver: ${{ inputs.runs_on != 'ubuntu-latest' && 'remote' || '' }}
          endpoint: ${{ inputs.runs_on != 'ubuntu-latest' && 'tcp://buildkit-buildkit-service:1234' || '' }}

      - name: Build and push
        uses: docker/build-push-action@v6
        with:
          push: ${{ github.event_name != 'pull_request' }}
          context: "{{defaultContext}}:${{ needs.setup.outputs.context_dir }}"
          file: ${{ needs.setup.outputs.dockerfile_path }}
          build-args: ${{ inputs.build_args }}
          cache-from: "type=registry,ref=ghcr.io/${{ needs.setup.outputs.image_name }}:cache"
          cache-to: "mode=max,image-manifest=true,oci-mediatypes=true,type=registry,ref=ghcr.io/${{ needs.setup.outputs.image_name }}:cache"
          tags: ${{ needs.setup.outputs.destinations }}
          platforms: ${{ inputs.dind_platforms }}
