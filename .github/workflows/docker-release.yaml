name: ðŸš€ Release Docker Image
on:
  workflow_call:
    inputs:
      runs_on:
        description: The runner to use for the job
        default: "self-hosted"
        required: false
        type: string
      platforms:
        description: The platforms to build the Docker image for
        default: "linux/amd64"
        required: false
        type: string
      context_dir:
        description: The context directory to build the Docker image in
        default: "."
        required: false
        type: string
      dockerfile_path:
        description: The path to the Dockerfile to build, relative to the context directory
        default: "Dockerfile"
        required: false
        type: string
      build_args:
        description: Build arguments to pass to the Docker build
        default: ""
        required: false
        type: string
      force_build:
        description: Force build even if no Dockerfile changes detected
        default: false
        required: false
        type: boolean

jobs:
  setup:
    runs-on: ${{ inputs.runs_on }}
    outputs:
      context_dirs: ${{ steps.app-meta.outputs.context_dirs }}
      dockerfile_paths: ${{ steps.app-meta.outputs.dockerfile_paths }}
      image_names: ${{ steps.app-meta.outputs.image_names }}
      versions: ${{ steps.app-meta.outputs.versions }}
      descriptions: ${{ steps.app-meta.outputs.descriptions }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Get all changed version files
        id: changed-files
        uses: tj-actions/changed-files@v45
        with:
          files: |
            **/version.txt

      - name: Get App metadata
        id: app-meta
        run: |
          # Initialize arrays for outputs
          declare -a context_dirs
          declare -a dockerfile_paths
          declare -a image_names
          declare -a versions
          declare -a descriptions

          if [[ "${{ steps.changed-files.outputs.all_changed_files_count }}" -gt "0" || "${{ inputs.force_build }}" == "true" ]]; then
            if [[ "${{ steps.changed-files.outputs.all_changed_files_count }}" -gt "0" ]]; then
              # Process changed version files
              while IFS= read -r changed_file; do
                if [[ -n "${changed_file}" ]]; then
                  context_dir=$(dirname $changed_file)
                  dockerfile_path="Dockerfile"  # Assuming Dockerfile is in the same directory
                  
                  # If version.txt is in root, use repo name as app_name
                  if [[ "$context_dir" == "." ]]; then
                    app_name="${{ github.event.repository.name }}"
                  else
                    app_name=$(basename $context_dir)
                  fi
                  
                  # Only process if Dockerfile exists
                  if [[ -f "$context_dir/Dockerfile" ]]; then
                    # Read version from version.txt
                    version=$(cat "$changed_file")
                    tag_name="${app_name}-${version}"
                    
                    # Check if tag already exists
                    if [ $(git tag -l ${tag_name}) ]; then
                      echo "Tag ${tag_name} already exists, skipping image ${app_name}"
                      continue
                    fi
                    
                    context_dirs+=("$context_dir")
                    dockerfile_paths+=("$dockerfile_path")
                    image_names+=("${{ github.event.repository.owner.login }}/$app_name")
                    versions+=("$version")
                    descriptions+=("Docker image for ${app_name} version ${version}")
                  fi
                fi
              done <<< "${{ steps.changed-files.outputs.all_changed_files }}"
            else
              # Force build with input parameters
              context_dirs+=("${{ inputs.context_dir }}")
              dockerfile_paths+=("${{ inputs.dockerfile_path }}")
              image_names+=("${{ github.event.repository.owner.login }}/${{ github.event.repository.name }}")
              versions+=("${{ github.ref_name }}")
              descriptions+=("Docker image for ${{ github.event.repository.name }}")
            fi
          else
            # No changes and no force build
            echo "No changes detected and force_build is false"
            exit 0
          fi

          # Convert arrays to JSON and properly escape for GITHUB_OUTPUT
          context_dirs_json=$(printf '%s\n' "${context_dirs[@]}" | jq -R . | jq -sc | jq -r tostring)
          dockerfile_paths_json=$(printf '%s\n' "${dockerfile_paths[@]}" | jq -R . | jq -sc | jq -r tostring)
          image_names_json=$(printf '%s\n' "${image_names[@]}" | jq -R . | jq -sc | jq -r tostring)
          versions_json=$(printf '%s\n' "${versions[@]}" | jq -R . | jq -sc | jq -r tostring)
          descriptions_json=$(printf '%s\n' "${descriptions[@]}" | jq -R . | jq -sc | jq -r tostring)

          # Write to GITHUB_OUTPUT with proper delimiter
          {
            echo "context_dirs<<EOF"
            echo "$context_dirs_json"
            echo "EOF"
            echo "dockerfile_paths<<EOF"
            echo "$dockerfile_paths_json"
            echo "EOF"
            echo "image_names<<EOF"
            echo "$image_names_json"
            echo "EOF"
            echo "versions<<EOF"
            echo "$versions_json"
            echo "EOF"
            echo "descriptions<<EOF"
            echo "$descriptions_json"
            echo "EOF"
          } >> "$GITHUB_OUTPUT"

  release:
    needs: [setup]
    runs-on: ${{ inputs.runs_on }}
    permissions:
      contents: write
      packages: write
    strategy:
      matrix:
        context_dir: ${{ fromJson(needs.setup.outputs.context_dirs) }}
        dockerfile_path: ${{ fromJson(needs.setup.outputs.dockerfile_paths) }}
        image_name: ${{ fromJson(needs.setup.outputs.image_names) }}
        version: ${{ fromJson(needs.setup.outputs.versions) }}
        description: ${{ fromJson(needs.setup.outputs.descriptions) }}
    steps:
      - name: Login to GHCR
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ github.token }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        with:
          driver: ${{ inputs.runs_on != 'ubuntu-latest' && 'remote' || '' }}
          endpoint: ${{ inputs.runs_on != 'ubuntu-latest' && 'tcp://buildkit-buildkit-service:1234' || '' }}

      - name: Get Docker metadata
        id: docker-meta
        uses: docker/metadata-action@v5
        with:
          images: ghcr.io/${{ matrix.image_name }}
          tags: |
            type=raw,value=${{ matrix.version }}
            type=sha
            type=schedule
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=semver,pattern={{major}}
            type=raw,value=latest,enable={{is_default_branch}}
            type=sha,format=long,priority=1001

      - name: Build and push
        uses: docker/build-push-action@v6
        with:
          push: ${{ github.event_name != 'pull_request' }}
          context: "{{defaultContext}}:${{ matrix.context_dir }}"
          file: ${{ matrix.dockerfile_path }}
          build-args: ${{ inputs.build_args }}
          cache-from: "type=registry,ref=ghcr.io/${{ matrix.image_name }}:cache"
          cache-to: "mode=max,image-manifest=true,oci-mediatypes=true,type=registry,ref=ghcr.io/${{ matrix.image_name }}:cache"
          tags: ${{ steps.docker-meta.outputs.tags }}
          platforms: ${{ inputs.platforms }}

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2.1.0
        with:
          tag_name: ${{ matrix.image_name }}-${{ matrix.version }}
          body: |
            ${{ matrix.description }}

            Source commit: https://github.com/${{ github.repository }}/commit/${{ github.sha }}
